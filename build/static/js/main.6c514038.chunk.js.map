{"version":3,"sources":["Components/Header.js","Components/Contact.js","Components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Navbar","bg","expand","variant","className","Container","Brand","href","Nav","Item","Link","Contact","contact","Card","Body","name","ListGroup","email","phone","Contacts","id","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAkBeA,EAfA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,OAAO,KAAKC,QAAQ,OAAOC,UAAU,aACvD,kBAACC,EAAA,EAAD,CAAWD,UAAU,WACnB,kBAACJ,EAAA,EAAOM,MAAR,CAAcC,KAAK,KAAKR,IAE1B,kBAACS,EAAA,EAAD,CAAKJ,UAAU,WACb,kBAACI,EAAA,EAAIC,KAAL,CAAUF,KAAK,KACb,kBAACC,EAAA,EAAIE,KAAL,iB,gBCcKC,EAtBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CAAWV,UAAU,QACnB,4BAAKQ,EAAQG,MACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUP,KAAX,KACE,uCAAaG,EAAQK,QAEvB,kBAACD,EAAA,EAAUP,KAAX,KACE,uCAAaG,EAAQM,YCuBlBC,G,MAjCE,WAwBf,OACE,6BAxBa,CACb,CACEC,GAAI,EACJL,KAAM,mBACNE,MAAO,sBACPC,MAAO,SAGT,CACEE,GAAI,EACJL,KAAM,eACNE,MAAO,oBACPC,MAAO,WAGT,CACEE,GAAI,EACJL,KAAM,aACNE,MAAO,kBACPC,MAAO,SAMCG,KAAI,SAAAT,GAAO,OACjB,kBAAC,EAAD,CAASU,IAAKV,EAAQQ,GAAIR,QAASA,UCX5BW,MAXf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,CAAQL,MAAM,oBACd,kBAACM,EAAA,EAAD,KACE,kBAAC,EAAD,SCDYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6c514038.chunk.js","sourcesContent":["import React from \"react\";\nimport { Nav, Navbar, Container } from \"react-bootstrap\";\n\nconst Header = ({ title }) => {\n  return (\n    <Navbar bg=\"danger\" expand=\"sm\" variant=\"dark\" className=\"mb-3 py-0\">\n      <Container className=\"ml-auto\">\n        <Navbar.Brand href=\"/\">{title}</Navbar.Brand>\n      </Container>\n      <Nav className=\"mr-auto\">\n        <Nav.Item href=\"/\">\n          <Nav.Link>Home</Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\n\nconst Contact = ({ contact }) => {\n  return (\n    <Card>\n      <Card.Body className=\"mb-3\">\n        <h4>{contact.name}</h4>\n        <ListGroup>\n          <ListGroup.Item>\n            <div>email: {contact.email}</div>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <div>Phone: {contact.phone}</div>\n          </ListGroup.Item>\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst title = {\n  fontSize: 20\n};\n\nexport default Contact;\n","import React, { useState } from \"react\";\nimport Contact from \"./Contact\";\n\nconst Contacts = () => {\n  const people = [\n    {\n      id: 1,\n      name: \"Giuseppe Di Lisa\",\n      email: \"gdilisa@hotmail.com\",\n      phone: \"14885\"\n    },\n\n    {\n      id: 2,\n      name: \"Sarah Fenton\",\n      email: \"sarah@hotmail.com\",\n      phone: \"4751411\"\n    },\n\n    {\n      id: 3,\n      name: \"Bob Marley\",\n      email: \"bob@hotmail.com\",\n      phone: \"1242\"\n    }\n  ];\n\n  return (\n    <div>\n      {people.map(contact => (\n        <Contact key={contact.id} contact={contact} />\n      ))}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Contact from \"./Components/Contact\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\nimport Contacts from \"./Components/Contacts\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header title=\"Contact Manager\"></Header>\n      <Container>\n        <Contacts />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}